// Create several functions that each has their own role:
    // Function to compare the hands.
    // Functiont to update the scores.


// NOTE: Limit global variables as much as possible.
// Create a function that contains the whole game:
const game = ()=> {
    // NOTE: Think about/create variables you may need to manipulate across multiple functions.
    // Create variables to store 'player' and 'computer' scores:
    let playerScore = 0;
    let computerScore = 0;
    //NOTE: Scores are set to 0 starting the game so we can increment by 1 ('++') based on whos' winning.

    // This function will fade out the 'intro' class/section and fade in the 'matchScreen' class/section.
    const startGame = ()=> {
        // NOTE: Instead of creating global variables, restrict variables to the function in which you need them.
        // In here, all we need is two pages, start/intro page & game/playing page.
        // This variable gets & holds the 'Let's Play' '<button> tag.
            // NOTE: The '.querySelector()' method gets elements from HTML to manipulate with JS.
        const playButton = document.querySelector('.intro button'); // The 'button' argument after 'intro' affects <button> element(s) in '.intro' class/section.
            
        // This variable gets & holds the '.intro' screen.
        const introScreen = document.querySelector('.intro'); // NOTE; no argument after 'intro' affects entire '.intro' class/section.
        
        // This variable gets & holds the 'matchScreen' screen.  
        const matchScreen = document.querySelector('.matchScreen');

        // Add event listener to listen for clicks on the 'Let's Play' <button>:
        playButton.addEventListener('click', ()=>{ // Every time user 'clicks' on 'Let's Play' <button> run this function:
            introScreen.classList.add('fadeOut'); // Fade-out '.intro' screen.
            matchScreen.classList.add('fadeIn'); // Fade-in the '.matchScreen' screen to start game.
        });
    };


    // GAME PLAY
    // Create function to play game:
    const playMatch = ()=> {
        // Create a variable that gets and holds all the <buttons> in the '.options' class.
        const options = document.querySelectorAll('.option button');
        
        // Create variables to get and hold the player and computer hands:
        const playerHand = document.querySelector('.player-hand');
        const computerHand = document.querySelector('.computer-hand');
        
        // Create a variable that holds an array of computer options:
        const computerOptions = ['rock', 'paper', 'scissors'];

        // Get hand images from HTML & store them in a variable:
        const hands = document.querySelectorAll('.hands img');
        // Run a function for each hand image:
        hands.forEach(hand => {
            // Fore each hand add an event listener that is going to listen for the animation to end and then runs a function:
            hand.addEventListener('animationend', function() {
                this.style.animation = ""; // empty string to reset animation.
            });
        })


        // Loop through each button:
        // NOTE: When using 'arrow ()=>' functions, you can eliminate the extra inner parenthesisi '()' if there's only one parameter/argument. 
        options.forEach(option=>{ // loop through each <button> in the '.option' class and for each option, run this function:
            option.addEventListener('click', function() { // add an event listener for each <button> and on 'clicks' run this:
                /* NOTE: For scopoing reasons, in this event we used a normal function instead of an arrow function because if we used an arrow function, 
                         the keyword 'this' will not connect to parameters inside this function.*/
                // Computer's player options:
                    // Create function that generates a random number and based on that number index, select an option in 'computerOptions'.
                const computerRandomIndexChoice = Math.floor(Math.random() * 3); // selects a random number between 0 up to 3. Including 0 but NOT 3.
                // console.log(this);
                /* Create variable that calls the 'computerOptions' array above which contain the player options. 
                   Then add the random number generated by 'computerRandomIndexChoice' variable as the index number
                   to select a random option out of the array: */
                const computerChoice = computerOptions[computerRandomIndexChoice];
                // console.log(computerChoice);
                
                
                

                // Set a delay/timeout to update/ images after animations run:
                    // NOTE: 'setTimeout' takes a function as the first parameter and the second parameter is the time, how long you'd like to delay this function.
                setTimeout(() => {
                    // Compare the hands by calling the 'compareHands' function:
                    // NOTE: '.textContent()' method gets or sets text values inside HTML class.
                    /* In here we are calling the 'compareHands' function the passing the value of the <button> user 'clicks' and 
                    the random value for the computer's choice created above. */
                    compareHands(this.textContent, computerChoice);
                    
                    // Updates the images:
                    // Update player's hand image in the '.hands' class according to the <button> user 'clicks' in the event listener:
                    playerHand.src = `./assets/${this.textContent}.png`;
                    // Update computer's hand image in the '.hands' class according to the random selection in computerChoice variable:
                    computerHand.src = `./assets/${computerChoice}.png`;
                }, 2000); // Time in milliseconds. Since the animations run for 2 seconds we set the time out for 2 seconds.

                // Get animations from CSS:
                    /* NOTE: 'object.style.animation' is a DOM Styling property. In this case the 'object' is 'playerHand' & 'computerHand' variables 
                              which contain the images in '.player-hand' & '.computer-hand' classes from HTML. */
                playerHand.style.animation = "shakePlayer 2s ease"; // set the animation properties to 'playerHand' images.
                computerHand.style.animation = "shakeComputer 2s ease"; // set the animation properties to 'computerrHand' images.
                    // NOTE: Once the animations run, they do not run again when a user clicks. A function needs to be created to reset animations.
            });
        });
    };

        // Create a function that updates the score:
        const updateScore = ()=>{
            // Get the 'player-score' class from HTML and hold it in 'userScore' variable:
                // NOTE: The 'p' argument gets the values from <p> tags inside the HTML class.
            const userScore = document.querySelector('.player-score p');
            // Get the value of <p> tags inside 'computer-score' class and hold it in 'computerScore' variable:
            const machineScore = document.querySelector('.computer-score p');
            // Use '.textContent()' method to set/send new values to the <p> tags section inside the classes 
            userScore.textContent = playerScore; //
            machineScore.textContent = computerScore;
        };
    

        // Create a function to compare both 'player-hand' & 'computer-hand':
        const compareHands = (playerChoice, computerChoice) => { // 'playerChoice' & 'computerChoice' are the values being passed to the function.
            // Create a varialbe that gets and updates text in the ".winner" class.
            const winner = document.querySelector(".winner");
            // Set a condition that checks for a tie:
            if (playerChoice === computerChoice){
                winner.textContent = "It's a tie!";
                return; // ends the function once the block is ran.
            }
            // Set a condition that checks for "rock":
            if (playerChoice === "rock"){ // if user is rock
                if (computerChoice === 'scissors'){ // check if the computer is scissors
                    // If the computer is scissors, print 'Player Wins' inside ".winner" section of the HTML/page
                    winner.textContent = 'Player Wins';
                    playerScore++;
                    updateScore();
                    return;
                }else{
                    // otherwise, if the computer is anything else (paper), print 'Computer Wins':
                    winner.textContent = "Computer Wins";
                    computerScore++;
                    updateScore();
                    return;
                }
            }

            // Set a condition that checks for "paper":
            if (playerChoice === "paper"){ // if user is 'paper'
                if (computerChoice === 'scissors'){ // check if the computer is scissors
                    // if the computer is scissors, print 'Player Wins' inside ".winner" section of the HTML/page
                    winner.textContent = 'Comuter Wins';
                    computerScore++;
                    updateScore();
                    return;
                }else{
                    // otherwise, if the computer is anything else (rock), print 'Computer Wins':
                    winner.textContent = "Player Wins";
                    playerScore++;
                    updateScore();
                    return;
                }
            }

            // Set a condition that checks for "scissors":
            if (playerChoice === "scissors"){ // if user is 'scissors'
                if (computerChoice === 'paper'){ // check if the computer is 'paper'
                    // if the computer is paper, print 'Player Wins' inside ".winner" section of the HTML/page
                    winner.textContent = 'Player Wins';
                    playerScore++;
                    updateScore();
                    return;
                }else{
                    // otherwise, if the computer is anything else (rock), print 'Computer Wins':
                    winner.textContent = "Computer Wins";
                    computerScore++;
                    updateScore();
                    return;
                };
            };
        };

    // Call all of the inner-funcions created above;
    startGame();
    playMatch();
};


// Call the main function to start the game:
game();